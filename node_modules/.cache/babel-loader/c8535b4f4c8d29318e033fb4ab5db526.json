{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst Errors = Object.freeze({\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Constructor can't have get/set modifier\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly one argument\",\n  ImportCallArityLtOne: \"Dynamic imports require a parameter: import('a.js')\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Octal literal in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"You have trailing decorators with no method\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"You can only use decorators on an export when exporting a class\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Stage 2 decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Stage 2 decorators disallow object literal property decorators\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass LocationParser extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkDuplicatedProto(prop, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.method || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\" && prop.kind === \"init\") {\n      if (protoRef.used) {\n        if (refExpressionErrors && refExpressionErrors.doubleProto === -1) {\n          refExpressionErrors.doubleProto = key.start;\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, Errors.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\nconst reservedWords = {\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nconst isReservedWord = (word, inModule) => {\n  return inModule && word === \"await\" || word === \"enum\";\n};\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between ´%´ and ´checks´ are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(noIn, undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssign();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node));\n    } else {\n      return super.toAssignable(node);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\")) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (jsx && jsx.error || this.isRelational(\"<\")) {\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(() => {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n        arrowExpression.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        return arrowExpression;\n      }, state);\n      const arrowExpression = arrow.node && arrow.node.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n      if (!arrow.error && arrowExpression) return arrowExpression;\n\n      if (jsx && jsx.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, Errors.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b000,\n      PARAM_YIELD = 0b001,\n      PARAM_AWAIT = 0b010,\n      PARAM_RETURN = 0b100;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      if (elementNode.type === \"TSOptionalType\") {\n        seenOptionalElement = true;\n      } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    if (this.match(types.ellipsis)) {\n      const restNode = this.startNode();\n      this.next();\n      restNode.typeAnnotation = this.tsParseType();\n\n      if (this.match(types.comma) && this.lookaheadCharCode() !== 93) {\n        this.raiseRestNotLast(this.state.start);\n      }\n\n      return this.finishNode(restNode, \"TSRestType\");\n    }\n\n    const type = this.tsParseType();\n\n    if (this.eat(types.question)) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n\n          if (this.lookahead().type !== types.num) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, Errors.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsync(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            return this.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) && this.lookahead().type === types.eq) {\n      return this.tsParseImportEqualsDeclaration(node);\n    }\n\n    return super.parseImport(node);\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if (jsx && jsx.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if (typeCast && typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if (jsx && jsx.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if (typeCast && typeCast.thrown) throw typeCast.error;\n    throw jsx && jsx.error || arrow.error || typeCast && typeCast.error;\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TSTypeCastExpression\") {\n        this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends LocationParser {\n  constructor(options, input) {\n    super();\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\") || this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      this.finishOp(types.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, \"#\");\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== 33) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63 && !this.state.inType) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        ++this.state.pos;\n        this.finishToken(types.bracketL);\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        ++this.state.pos;\n        this.finishToken(types.braceL);\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === 95) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n\n    let octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === 110) {\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          let octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op) {\n    const next = this.nextTokenStart();\n\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? Errors.StrictEvalArguments : Errors.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkDuplicatedProto(prop, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.kind || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(noIn, refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(noIn, refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, Errors.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const op = this.state.type;\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, Errors.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(types.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    const computed = this.eat(types.bracketL);\n\n    if (optional && !this.match(types.parenL) && !this.match(types.backQuote) || computed || this.eat(types.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this.parseExpression() : optional ? this.parseIdentifier(true) : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n\n        this.classScope.usePrivateName(node.property.id.name, node.property.start);\n      }\n\n      if (computed) {\n        this.expect(types.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(types.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.next();\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (optional) {\n        node.optional = true;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      }\n\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, Errors.ImportCallArity);\n      } else {\n        const importArg = node.arguments[0];\n\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, Errors.ImportCallSpreadArgument);\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(this.state.lastTokStart, Errors.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          node = this.startNode();\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            const last = this.state.context.length - 1;\n\n            if (this.state.context[last] !== types$1.functionStatement) {\n              throw new Error(\"Internal error\");\n            }\n\n            this.state.context[last] = types$1.functionExpression;\n            this.next();\n            return this.parseFunction(node, undefined, true);\n          } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n            const oldYieldPos = this.state.yieldPos;\n            const oldAwaitPos = this.state.awaitPos;\n            this.state.maybeInArrowParameters = true;\n            this.state.yieldPos = -1;\n            this.state.awaitPos = -1;\n            const params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.checkYieldAwaitInDefaultParams();\n            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n            this.state.yieldPos = oldYieldPos;\n            this.state.awaitPos = oldAwaitPos;\n            this.parseArrowExpression(node, params, true);\n            return node;\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            this.parseArrowExpression(node, [id], false);\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n          const node = this.startNode();\n          this.next();\n          const oldLabels = this.state.labels;\n          this.state.labels = [];\n          node.body = this.parseBlock();\n          this.state.labels = oldLabels;\n          return this.finishNode(node, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(types.bracketR, true, refExpressionErrors, node);\n\n          if (!this.state.maybeInArrowParameters) {\n            this.toReferencedList(node.elements);\n          }\n\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"ArrayExpression\");\n        }\n\n      case types.braceL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(false, refExpressionErrors);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, Errors.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, Errors.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(types.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, Errors.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, Errors.ImportCallArityLtOne);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.expect(types.parenL);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i = 0; _i < exprList.length; _i++) {\n        const param = exprList[_i];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNew() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(types.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObj(isPattern, refExpressionErrors) {\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(types.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkDuplicatedProto(prop, propHash, refExpressionErrors);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n  }\n\n  isAsyncProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.match(types.name) || this.match(types.num) || this.match(types.string) || this.match(types.bracketL) || this.state.type.keyword || this.match(types.star)) && !this.hasPrecedingLineBreak();\n  }\n\n  parseObjectMember(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(types.star);\n      this.parsePropertyName(prop, false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, false);\n      this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      if ((name === \"class\" || name === \"function\") && (this.state.lastTokEnd !== this.state.lastTokStart + 1 || this.input.charCodeAt(this.state.lastTokStart) !== 46)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInArrowParameters || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield(noIn) {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n\n        bodyNode.expression = childExpression;\n        break;\n\n      default:\n        throw new Error(`Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`);\n    }\n\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression) {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, Errors.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, Errors.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, Errors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, Errors.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    let parsedNonDirective = false;\n    let oldStrict = null;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === null && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, oldStrict !== null);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, Errors.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, Errors.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n    this.state.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(types.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        const method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return;\n      } else if (this.isClassProperty()) {\n        const prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseAccessModifier() {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, types._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return this.input.charCodeAt(next) === 44 || this.isUnparsedContextual(next, \"from\");\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      const isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? Errors.DuplicateDefaultExport : Errors.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/location.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","constructor","conf","keywords","options","token","binop","types","num","bigint","regexp","string","name","eof","bracketL","bracketR","braceL","braceBarL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","createBinop","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","rightAssociative","_break","createKeyword","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","skipWhiteSpace","line","lineStart","match","offset","hasPlugin","getPluginOption","stack","addComment","comment","adjustCommentsAfterTrailingComma","lastElement","i","elements","j","newTrailingComments","leadingComment","node","processComment","trailingComments","lastInStack","last","firstChild","lastChild","leadingComments","Errors","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallArityLtOne","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidCodePoint","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateNameRedeclaration","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","getLocationForPosition","pos","loc","getLineInfo","raise","raiseWithData","message","errorTemplate","params","column","_raise","err","Object","superClass","estreeParseRegExpLiteral","flags","regex","estreeParseBigIntLiteral","bigInt","BigInt","String","estreeParseLiteral","directiveToStmt","directiveLiteral","directive","stmt","expression","initFunction","checkDeclaration","isSimpleProperty","checkGetterSetterParams","prop","paramCount","start","method","checkLVal","bindingType","expr","checkDuplicatedProto","key","protoRef","refExpressionErrors","isValidDirective","stmtToDirective","value","parseBlockBody","directiveStatements","d","pushClassMethod","classBody","parseExprAtom","tt","parseLiteral","parseFunctionBody","isMethod","parseMethod","inClassScope","funcNode","type","parseObjectMethod","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","finishCallExpression","toReferencedListDeep","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","functionExpression","functionStatement","out","allowed","prevType","statementParens","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","inModule","word","isStrictReservedWord","isStrictBindOnlyReservedWord","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","length","set","code","isInAstralSet","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","bodyElement","state","exportSuggestions","const","let","interface","list1","list2","list","test","FLOW_PRAGMA_REGEX","shouldParseTypes","shouldParseEnums","finishToken","matches","flowParseTypeInitialiser","oldInType","tok","flowParsePredicate","moduloLoc","moduloPos","checksLoc","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseDeclareFunction","id","typeNode","typeContainer","tmp","flowParseDeclare","flowParseDeclareVariable","flowParseDeclareModule","bodyNode","body","kind","hasModuleExport","isEsModuleType","flowParseDeclareExportDeclaration","label","suggestion","flowParseDeclareModuleExports","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseInterfaceish","isClass","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseInterfaceExtends","flowParseInterface","checkNotUnderscore","checkReservedType","declaration","flowParseRestrictedIdentifier","flowParseTypeAlias","flowParseOpaqueType","flowParseTypeParameter","requireDefault","nodeStart","variance","ident","flowParseTypeParameterDeclaration","defaultRequired","typeParameter","flowParseTypeParameterInstantiation","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseObjectTypeCallProperty","valueNode","flowParseObjectType","inexact","endDelim","exact","isStatic","protoStart","inexactStart","lookahead","propOrInexact","flowParseObjectTypeProperty","isInexactToken","optional","flowCheckGetterSetterParams","property","flowObjectTypeSemicolon","flowParseQualifiedTypeIdentifier","startPos","startLoc","node2","flowParseGenericType","flowParseTypeofType","flowParseTupleType","flowParseFunctionTypeParam","typeAnnotation","lh","reinterpretTypeAsFunctionTypeParam","flowParseFunctionTypeParams","rest","flowIdentToTypeAnnotation","flowParsePrimaryType","isGroupedType","flowParsePostfixType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","flowParseType","flowParseTypeOrImplicitInstantiation","flowParseTypeAnnotation","flowParseTypeAnnotatableIdentifier","allowPrimitiveOverride","typeCastToParameter","flowParseVariance","parseFunctionBodyAndFinish","parseStatement","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","result","refNeedsArrowPos","originalNoArrowAt","failed","invalid","noArrowAt","valid","tryParseConditionalConsequent","consequent","getArrowLikeExpressions","arrows","partition","finishArrowValidation","forwardNoArrowParamsConversionAt","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExport","decl","parseExportDeclaration","declarationNode","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","getTokenFromCode","isIteratorStart","isAssignable","element","toAssignableList","exprList","toReferencedList","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","implemented","parsePropertyName","parseObjPropValue","typeParameters","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","hasTypeImportKind","isMaybeDefaultImport","parseImportSpecifierLocal","specifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isBinding","as_ident","nodeIsTypeImport","specifierIsTypeImport","parseFunctionParams","parseVarId","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","parseMaybeAssign","jsx","context","tc","arrowExpression","parseArrow","shouldParseArrow","setArrowFunctionParameters","checkParams","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","abort","parseSubscript","subscriptState","parseNewArguments","targs","parseAsyncArrowWithTypeParameters","readToken_mult_modulo","readToken_pipe_amp","parseTopLevel","fileNode","skipBlockComment","end","skipFlowComment","shiftToFirstNonWhiteSpace","ch2","ch3","hasFlowCommentCompletion","flowEnumErrorBooleanMemberNotInitialized","memberName","flowEnumErrorInvalidMemberName","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","enumName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","explicitType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","flowEnumStringMembers","initializedMembers","member","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","flowParseEnumDeclaration","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","object","getQualifiedJSXName","jsxReadToken","chunkStart","ch","isNewLine","jsxReadNewLine","normalizeCRLF","jsxReadString","jsxReadEntity","str","count","entity","parseInt","XHTMLEntities","jsxReadWord","isIdentifierChar","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseExpressionContainer","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","isFragment","jsxParseElement","isIdentifierStart","updateContext","curContext","var","lexical","functions","scopeStack","undefinedExports","undefinedPrivateNames","createScope","enter","exit","treatFunctionsAsVarInScope","scope","declareName","maybeExportDefined","checkRedeclarationInScope","isRedeclaredInScope","checkLocalExport","currentScope","currentVarScope","currentThisScope","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","currentFlags","isAsync","isGenerator","x","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","tsParseModifier","modifier","allowedModifiers","tsParseModifiers","modified","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","nonNull","tsParseDelimitedListWorker","tsParseBracketedList","tsParseImportType","tsParseEntityName","tsParseTypeReference","tsParseThisTypePredicate","tsParseThisTypeNode","tsParseTypeQuery","tsParseTypeParameter","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnTokenRequired","returnToken","signature","tsParseBindingListForSignature","pattern","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsParsePropertyOrMethodSignature","nodeAny","tsParseTypeMember","readonly","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsParseMappedType","tsParseTupleType","seenOptionalElement","elementNode","tsParseTupleElementType","restNode","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","keywordTypeFromName","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseTypeOperatorOrHigher","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsIsUnambiguouslyStartOfFunctionType","tsParseTypeOrTypePredicateAnnotation","t","asserts","thisTypePredicate","typePredicateVariable","tsTryParseTypeOrTypePredicateAnnotation","tsTryParseTypeAnnotation","tsTryParseType","tsParseTypePredicatePrefix","tsParseTypePredicateAsserts","containsEsc","tsParseTypeAnnotation","eatColon","tsParseType","assert","tsParseNonConditionalType","tsParseTypeAssertion","tsParseHeritageClause","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","oldContext","cb","tsInType","tsEatThenParseType","tsExpectThenParseType","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","tsParseEnumDeclaration","tsParseModuleBlock","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","tsParseImportEqualsDeclaration","isExport","tsIsExternalModuleReference","tsParseModuleReference","tsParseExternalModuleReference","tsLookAhead","res","f","tsTryParseAndCatch","tsTryParse","tsTryParseDeclare","starttype","nany","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsParseDeclaration","cls","tsCheckLineTerminatorAndMatch","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","oldYieldPos","oldAwaitPos","tsParseTypeArguments","tsIsDeclarationStart","parseAssignableListItem","accessibility","left","elt","pp","decorators","bodilessType","registerFunctionStatementId","nonNullExpression","asyncArrowFn","typeArguments","args","parseExprOp","checkReservedWord","checkDuplicateExports","parseImport","isAbstractClass","parseStatementContent","ahead","parseAccessModifier","parseClassMember","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","ct","typeCast","parseMaybeUnary","returnType","parseBindingAtom","parseMaybeDecoratorArguments","call","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parsePlaceholder","finishPlaceholder","isFinished","parseIdentifier","verifyBreakContinue","parseBlock","parseFunctionId","parseClass","isStatement","placeholder","optionalId","maybeParseExportDefaultSpecifier","checkExport","specifiers","hasStarImport","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","plugin","Array","PIPELINE_PROPOSALS","decoratorsBeforeExport","mixinPlugins","placeholders","mixinPluginNames","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","plugins","strictMode","ranges","tokens","createParenthesizedExpressions","errorRecovery","opts","maxNumOfResolvableTopics","maxTopicIndex","curPosition","clone","keys","val","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","input","pushToken","eat","old","curr","nextTokenStart","thisTokEnd","skip","lookaheadCharCode","setStrict","nextToken","override","pushComment","block","skipLineComment","skipSpace","loop","isWhitespace","readToken_numberSign","nextPos","readToken_dot","readToken_slash","readToken_interpreter","width","exprAllowed","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","finishOp","readRegexp","escaped","inClass","content","mods","char","charCode","readInt","allowNumSeparator","forbiddenSiblings","radix","allowedSiblings","total","e","len","prev","Number","readRadixNumber","isBigInt","readNumber","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","codePos","readString","readTmplToken","containsInvalid","readEscapedChar","throwOnInvalid","octalStr","readHexChar","n","readWord1","escStart","identifierCheck","esc","isIterator","readWord","keywordTypes","checkKeywordEscapes","braceIsBlock","parent","update","addExtra","extra","isRelational","isLookaheadRelational","afterNext","op","expectRelational","isContextual","isUnparsedContextual","nameEnd","nameStart","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","isLineTerminator","semicolon","expect","assertNoSpace","unexpected","messageOrType","expectPlugin","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","tryParse","oldState","abortSignal","fn","failState","error","thrown","aborted","checkExpressionErrors","doubleProto","shorthandAssign","parser","__clone","startNode","startNodeAt","startNodeAtNode","finishNode","finishNodeAt","resetStartLocation","resetEndLocation","endLoc","resetStartLocationFromNode","locationNode","unwrapParenthesizedExpression","parenthesized","isLast","arg","parseSpread","parseRestBinding","parseBindingList","elts","first","allowEmpty","strictModeChanged","isStrictBindReservedWord","checkClashes","disallowLetBinding","elem","checkToRestConversion","checkCommaAfterRest","raiseRestNotLast","raiseTrailingCommaAfterRest","getExpression","paramFlags","parseExpression","afterLeftParse","ownExpressionErrors","parseMaybeConditional","potentialArrowAt","parseExprOps","prec","logical","coalesce","nextOp","parseExprOpRightExpr","parseExprOpBaseRightExpr","parseExprSubscripts","optionalChainMember","maybeAsyncArrow","stop","noCalls","computed","parseTaggedTemplateExpression","atPossibleAsync","importArg","parseCallExpressionArguments","oldInFSharpPipelineDirectBody","innerParenStart","possibleAsyncArrow","parseNoCallExpr","oldLabels","ret","callee","parseBooleanLiteral","parseMaybePrivateName","isPrivate","parseFunctionExpression","meta","parseMetaProperty","propertyName","parseImportMetaProperty","innerStartPos","innerStartLoc","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","spreadStart","innerEndPos","innerEndLoc","arrowNode","parseNew","metaProp","parseTemplateElement","raw","cooked","parseTemplate","curElt","parseObj","propHash","isPattern","isAsyncProp","parseObjectMember","isGetterOrSetterMethod","oldInPropertyName","allowModifiers","allowDirectSuper","functionFlags","parseArrowExpression","isExpression","allowExpression","oldInParameters","oldStrict","hasStrictModeDirective","nonSimple","errorPos","isSimpleParamList","nameHash","allowDuplicates","parseExprList","parseExprListItem","createIdentifier","parseIdentifierName","checkKeywords","isKeyword","reservedTest","isAwaitAllowed","parseAwait","parseYield","checkPipelineAtInfixOperator","parseSmartPipelineBody","pipelineStyle","checkSmartPipelineBodyEarlyErrors","childExpression","parseSmartPipelineBodyInStyle","checkSmartPipelineBodyStyle","isSimpleReference","withTopicPermittingContext","outerContextTopicState","callback","withTopicForbiddingContext","withSoloAwaitPermittingContext","outerContextSoloAwaitState","registerTopicReference","primaryTopicReferenceIsAllowedInCurrentTopicContext","topicReferenceWasUsedInCurrentTopicContext","parseFSharpPipelineBody","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","program","file","parseInterpreterDirective","isLet","nextCh","nextTokenCharCode","maybeName","takeDecorators","parseDecorators","currentContextDecorators","decorator","parseDecorator","parseBreakContinueStatement","isBreak","keyword","lab","parseDebuggerStatement","parseHeaderExpression","parseDoStatement","parseForStatement","awaitAt","description","parseFunctionStatement","declarationPosition","parseIfStatement","parseReturnStatement","parseSwitchStatement","cases","isCase","cur","sawDefault","parseThrowStatement","parseTryStatement","clause","simple","parseVarStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","parseLabeledStatement","statementStart","allowDirectives","createNewLexicalScope","directives","parseBlockOrModuleBlockBody","octalPositions","parsedNonDirective","afterBlockParse","parseFor","parseForIn","isForIn","parseVar","declarations","isTypescript","isFor","parseFunction","statement","isHangingStatement","requireId","parseClassBody","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","isSimple","maybeQuestionTokenStart","isConstructor","allowsDirectSuper","parseClassPropertyName","pushClassProperty","pushClassPrivateProperty","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","hasDeclaration","maybeParseExportNamedSpecifiers","maybeParseExportDeclaration","isAsyncFunction","parseExportFrom","parseExportSpecifiers","nodes","parseNext","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","oldClassScope","declarePrivateName","classScope","redefined","elementType","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","getOptions","ScopeHandler","pluginsMap","pluginMap","getParser","ast","validatePlugins","getParserClass","parserClassCache","pluginList"],"mappings":"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","sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  classScope: ClassScopeHandler;\n  prodParam: ProductionParameterHandler;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const Errors = Object.freeze({\n  ArgumentsDisallowedInInitializer:\n    \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction:\n    \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  // todo: rephrase to get/set accessor\n  ConstructorIsAccessor: \"Constructor can't have get/set modifier\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly one argument\",\n  ImportCallArityLtOne: \"Dynamic imports require a parameter: import('a.js')\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Octal literal in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  //todo: rephrase this error message as it is too subjective\n  TrailingDecorator: \"You have trailing decorators with no method\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  //todo: rephrase this error message as it is too subjective\n  UnsupportedDecoratorExport:\n    \"You can only use decorators on an export when exporting a class\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  //todo: remove Stage 2 as we are likely to forget updating when it progressed\n  UnsupportedParameterDecorator:\n    \"Stage 2 decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Stage 2 decorators disallow object literal property decorators\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n\nexport default class LocationParser extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/location\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkDuplicatedProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if (\n        prop.type === \"SpreadElement\" ||\n        prop.computed ||\n        prop.method ||\n        // $FlowIgnore\n        prop.shorthand\n      ) {\n        return;\n      }\n\n      const key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\" && prop.kind === \"init\") {\n        // Store the first redefinition's position\n        if (protoRef.used) {\n          if (refExpressionErrors && refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          } else {\n            this.raise(key.start, Errors.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        (!stmt.expression.extra || !stmt.expression.extra.parenthesized)\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        delete node.arguments;\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedListDeep(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): void {\n      // ImportExpressions do not have an arguments array.\n      if (!exprList) {\n        return;\n      }\n\n      super.toReferencedListDeep(exprList, isParenthesizedExpr);\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function(prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" && !this.state.exprAllowed) ||\n      (this.state.value === \"yield\" && this.prodParam.hasYield)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function(prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function() {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function(prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function(prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { keywords } from \"../tokenizer/types\";\n\nconst reservedWords = {\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\n\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport const isReservedWord = (word: string, inModule: boolean): boolean => {\n  return (inModule && word === \"await\") || word === \"enum\";\n};\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 0x80.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/location\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  //todo: replace ´ by `\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between ´%´ and ´checks´ are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, noIn, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          (!expr.extra || !expr.extra.parenthesized) &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refExpressionErrors,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              noIn,\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if ((jsx && jsx.error) || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(() => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        const arrowExpression: ?N.ArrowFunctionExpression =\n          arrow.node && arrow.node.type === \"ArrowFunctionExpression\"\n            ? arrow.node\n            : null;\n\n        if (!arrow.error && arrowExpression) return arrowExpression;\n\n        // If we are here, both JSX and Flow parsing attemps failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx && jsx.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx && jsx.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/location\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function() {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function(prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/location\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b000, // Initial Parameter flags\n  PARAM_YIELD = 0b001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b010, // track [Await] production parameter\n  PARAM_RETURN = 0b100; // track [Return] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above. Note that the [In] parameter is\n// tracked in `noIn` argument of `parseExpression`.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = typeof PARAM | typeof PARAM_AWAIT | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/location\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer:\n    \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution:\n    \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        if (\n          this.match(tt.comma) &&\n          this.lookaheadCharCode() !== charCodes.rightSquareBracket\n        ) {\n          this.raiseRestNotLast(this.state.start);\n        }\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          TSErrors.TemplateTypeHasSubstitution,\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            if (this.lookahead().type !== tt.num) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsync(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) && this.lookahead().type === tt.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n      return super.parseImport(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, noIn, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters && typeParameters.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx && jsx.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast && typeCast.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast && typeCast.thrown) throw typeCast.error;\n\n      throw (jsx && jsx.error) || arrow.error || (typeCast && typeCast.error);\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TSTypeCastExpression\") {\n          this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers && specifiers.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to throw an error for\n  // an octal literal in a directive that occurs prior\n  // to a \"use strict\" directive.\n  octalPositions: number[] = [];\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport LocationParser, { Errors } from \"../parser/location\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends LocationParser {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      this.hasPlugin(\"classPrivateProperties\") ||\n      this.hasPlugin(\"classPrivateMethods\") ||\n      this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n    ) {\n      this.finishOp(tt.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, \"#\");\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketL);\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceL);\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === charCodes.underscore) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === charCodes.lowercaseN) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    // disallow numeric separators in non octal decimals and legacy octal likes\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input\n        .slice(start, this.state.pos)\n        .indexOf(\"_\");\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === charCodes.lowercaseN) {\n        // disallow floats, legacy octal syntax and non octal decimals\n        // new style octal (\"0o\") is handled in this.readRadixNumber\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          // $FlowFixMe\n          let octalStr = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              // This property is used to throw an error for\n              // an octal literal in a directive that occurs prior\n              // to a \"use strict\" directive.\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\nimport { Errors } from \"./location\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const next = this.nextTokenStart();\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== charCodes.equalsTo;\n    }\n    return false;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(\n        this.state.yieldPos,\n        \"Yield cannot be used as name inside a generator function\",\n      );\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(\n        this.state.awaitPos,\n        \"Await cannot be used as name inside an async function\",\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./location\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./location\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // Check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  checkDuplicatedProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.computed ||\n      prop.kind ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `noIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `noIn` is true, the production parameter [In] is not present.\n  //   Whenever [?In] appears in the right-hand sides of a production, we pass\n  //   `noIn` to the subroutine calls.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    noIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const op = this.state.type;\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          arg.type === \"MemberExpression\" &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    }\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n    const computed = this.eat(tt.bracketL);\n    if (\n      (optional && !this.match(tt.parenL) && !this.match(tt.backQuote)) ||\n      computed ||\n      this.eat(tt.dot)\n    ) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed\n        ? this.parseExpression()\n        : optional\n        ? this.parseIdentifier(true)\n        : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n        this.classScope.usePrivateName(\n          node.property.id.name,\n          node.property.start,\n        );\n      }\n\n      if (computed) {\n        this.expect(tt.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (optional) {\n        node.optional = true;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(\n          tt.parenR,\n          state.maybeAsyncArrow,\n          base.type === \"Import\",\n          base.type !== \"Super\",\n          node,\n        );\n      }\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        //\n        // Hi developer of the future :) If you are implementing generator\n        // arrow functions, please read the note below about \"await\" and\n        // verify if the same logic is needed for yield.\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        // Await is trickier than yield. When parsing a possible arrow function\n        // (e.g. something starting with `async(`) we don't know if its possible\n        // parameters will actually be inside an async arrow function or if it is\n        // a normal call expression.\n        // If it ended up being a call expression, if we are in a context where\n        // await expression are disallowed (and thus \"await\" is an identifier)\n        // we must be careful not to leak this.state.awaitPos to an even outer\n        // context, where \"await\" could not be an identifier.\n        // For example, this code is valid because \"await\" isn't directly inside\n        // an async function:\n        //\n        //     async function a() {\n        //       function b(param = async (await)) {\n        //       }\n        //     }\n        //\n        if (\n          (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n          oldAwaitPos !== -1\n        ) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      this.input.slice(base.start, base.end) === \"async\"\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, Errors.ImportCallArity);\n      } else {\n        const importArg = node.arguments[0];\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, Errors.ImportCallSpreadArgument);\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (\n          !this.scope.allowSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          const last = this.state.context.length - 1;\n          if (this.state.context[last] !== ct.functionStatement) {\n            // Since \"async\" is an identifier and normally identifiers\n            // can't be followed by expression, the tokenizer assumes\n            // that \"function\" starts a statement.\n            // Fixing it in the tokenizer would mean tracking not only the\n            // previous token (\"async\"), but also the one before to know\n            // its beforeExpr value.\n            // It's easier and more efficient to adjust the context here.\n            throw new Error(\"Internal error\");\n          }\n          this.state.context[last] = ct.functionExpression;\n\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n          const oldYieldPos = this.state.yieldPos;\n          const oldAwaitPos = this.state.awaitPos;\n          this.state.maybeInArrowParameters = true;\n          this.state.yieldPos = -1;\n          this.state.awaitPos = -1;\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          this.checkYieldAwaitInDefaultParams();\n          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refExpressionErrors,\n          node,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(false, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, Errors.ImportCallArityLtOne);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal or binding pattern.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(tt.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkDuplicatedProto(prop, propHash, refExpressionErrors);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    return this.finishNode(\n      node,\n      isPattern ? \"ObjectPattern\" : \"ObjectExpression\",\n    );\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.match(tt.name) ||\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bracketL) ||\n        this.state.type.keyword ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refExpressionErrors,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.match(tt.string) || // get \"string\"() {}\n      this.match(tt.num) || // get 1() {}\n      this.match(tt.bracketL) || // get [\"string\"]() {}\n      this.match(tt.name) || // get foo() {}\n        !!this.state.type.keyword) // get debugger() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string) || this.match(tt.bigint)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              BIND_OUTSIDE,\n              undefined,\n              \"function name\",\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (allowEmpty && this.match(tt.comma)) {\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the\n      // context-managing code already ignored the keyword\n      if (\n        (name === \"class\" || name === \"function\") &&\n        (this.state.lastTokEnd !== this.state.lastTokStart + 1 ||\n          this.input.charCodeAt(this.state.lastTokStart) !== charCodes.dot)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInArrowParameters || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw new Error(\n          `Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`,\n        );\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./location\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis ||\n          nextTokenCharCode === charCodes.dot\n        ) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the function body. They are permitted in function\n        // default-parameter expressions, which are part of the outer context,\n        // outside of the function body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the function body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the function body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const octalPositions = [];\n    let parsedNonDirective = false;\n    let oldStrict = null;\n\n    while (!this.eat(end)) {\n      // Track octal literals that occur before a \"use strict\" directive.\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === null && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    // Throw an error for any octal literals found before a\n    // \"use strict\" directive. Strict mode will be set at parse\n    // time for any literals that occur after the directive.\n    if (this.state.strict && octalPositions.length) {\n      for (const pos of octalPositions) {\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(\n        this,\n        /* hasStrictModeDirective */ oldStrict !== null,\n      );\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in test\n    // expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(constructorAllowsSuper: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body. They are permitted in test expressions,\n    // outside of the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(tt.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true); // eats 'static'\n\n      if (this.isClassMethod()) {\n        const method: N.ClassMethod = (member: any);\n\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(\n          classBody,\n          method,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n        return;\n      } else if (this.isClassProperty()) {\n        const prop: N.ClassProperty = (member: any);\n\n        // a property named 'static'\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      // otherwise something static\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        // export async;\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, tt._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      this.isUnparsedContextual(next, \"from\")\n    );\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/location\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}